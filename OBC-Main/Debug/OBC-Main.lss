
OBC-Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000420  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000428  20070000  00080420  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008c  20070428  00080848  00020428  2**2
                  ALLOC
  3 .stack        00002004  200704b4  000808d4  00020428  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020428  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020451  2**0
                  CONTENTS, READONLY
  6 .debug_info   00002945  00000000  00000000  000204aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000821  00000000  00000000  00022def  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000010ea  00000000  00000000  00023610  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000220  00000000  00000000  000246fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001c0  00000000  00000000  0002491a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000135d7  00000000  00000000  00024ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00004975  00000000  00000000  000380b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005d90d  00000000  00000000  0003ca26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000544  00000000  00000000  0009a334  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200724b8 	.word	0x200724b8
   80004:	00080201 	.word	0x00080201
   80008:	000801fd 	.word	0x000801fd
   8000c:	000801fd 	.word	0x000801fd
   80010:	000801fd 	.word	0x000801fd
   80014:	000801fd 	.word	0x000801fd
   80018:	000801fd 	.word	0x000801fd
	...
   8002c:	000801fd 	.word	0x000801fd
   80030:	000801fd 	.word	0x000801fd
   80034:	00000000 	.word	0x00000000
   80038:	000801fd 	.word	0x000801fd
   8003c:	000801fd 	.word	0x000801fd
   80040:	000801fd 	.word	0x000801fd
   80044:	000801fd 	.word	0x000801fd
   80048:	000801fd 	.word	0x000801fd
   8004c:	000801fd 	.word	0x000801fd
   80050:	000801fd 	.word	0x000801fd
   80054:	000801fd 	.word	0x000801fd
   80058:	000801fd 	.word	0x000801fd
   8005c:	000801fd 	.word	0x000801fd
   80060:	000801fd 	.word	0x000801fd
   80064:	000801fd 	.word	0x000801fd
   80068:	00000000 	.word	0x00000000
   8006c:	000801a1 	.word	0x000801a1
   80070:	000801b5 	.word	0x000801b5
   80074:	000801c9 	.word	0x000801c9
   80078:	000801dd 	.word	0x000801dd
	...
   80084:	000801fd 	.word	0x000801fd
   80088:	000801fd 	.word	0x000801fd
   8008c:	000801fd 	.word	0x000801fd
   80090:	000801fd 	.word	0x000801fd
   80094:	000801fd 	.word	0x000801fd
   80098:	000801fd 	.word	0x000801fd
   8009c:	000801fd 	.word	0x000801fd
   800a0:	000801fd 	.word	0x000801fd
   800a4:	00000000 	.word	0x00000000
   800a8:	000801fd 	.word	0x000801fd
   800ac:	000801fd 	.word	0x000801fd
   800b0:	000801fd 	.word	0x000801fd
   800b4:	000801fd 	.word	0x000801fd
   800b8:	000801fd 	.word	0x000801fd
   800bc:	000801fd 	.word	0x000801fd
   800c0:	000801fd 	.word	0x000801fd
   800c4:	000801fd 	.word	0x000801fd
   800c8:	000801fd 	.word	0x000801fd
   800cc:	000801fd 	.word	0x000801fd
   800d0:	000801fd 	.word	0x000801fd
   800d4:	000801fd 	.word	0x000801fd
   800d8:	000801fd 	.word	0x000801fd
   800dc:	000801fd 	.word	0x000801fd
   800e0:	000801fd 	.word	0x000801fd
   800e4:	000801fd 	.word	0x000801fd
   800e8:	000801fd 	.word	0x000801fd
   800ec:	000801fd 	.word	0x000801fd
   800f0:	000801fd 	.word	0x000801fd

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070428 	.word	0x20070428
   80110:	00000000 	.word	0x00000000
   80114:	00080420 	.word	0x00080420

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	2007042c 	.word	0x2007042c
   80144:	00080420 	.word	0x00080420
   80148:	00080420 	.word	0x00080420
   8014c:	00000000 	.word	0x00000000

00080150 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80154:	4604      	mov	r4, r0
   80156:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80158:	4b0e      	ldr	r3, [pc, #56]	; (80194 <pio_handler_process+0x44>)
   8015a:	4798      	blx	r3
   8015c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8015e:	4620      	mov	r0, r4
   80160:	4b0d      	ldr	r3, [pc, #52]	; (80198 <pio_handler_process+0x48>)
   80162:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80164:	4005      	ands	r5, r0
   80166:	d013      	beq.n	80190 <pio_handler_process+0x40>
   80168:	4c0c      	ldr	r4, [pc, #48]	; (8019c <pio_handler_process+0x4c>)
   8016a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   8016e:	6823      	ldr	r3, [r4, #0]
   80170:	4543      	cmp	r3, r8
   80172:	d108      	bne.n	80186 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80174:	6861      	ldr	r1, [r4, #4]
   80176:	4229      	tst	r1, r5
   80178:	d005      	beq.n	80186 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8017a:	68e3      	ldr	r3, [r4, #12]
   8017c:	4640      	mov	r0, r8
   8017e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80180:	6863      	ldr	r3, [r4, #4]
   80182:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80186:	42b4      	cmp	r4, r6
   80188:	d002      	beq.n	80190 <pio_handler_process+0x40>
   8018a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8018c:	2d00      	cmp	r5, #0
   8018e:	d1ee      	bne.n	8016e <pio_handler_process+0x1e>
   80190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80194:	000801f1 	.word	0x000801f1
   80198:	000801f5 	.word	0x000801f5
   8019c:	20070444 	.word	0x20070444

000801a0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   801a0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   801a2:	210b      	movs	r1, #11
   801a4:	4801      	ldr	r0, [pc, #4]	; (801ac <PIOA_Handler+0xc>)
   801a6:	4b02      	ldr	r3, [pc, #8]	; (801b0 <PIOA_Handler+0x10>)
   801a8:	4798      	blx	r3
   801aa:	bd08      	pop	{r3, pc}
   801ac:	400e0e00 	.word	0x400e0e00
   801b0:	00080151 	.word	0x00080151

000801b4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   801b4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   801b6:	210c      	movs	r1, #12
   801b8:	4801      	ldr	r0, [pc, #4]	; (801c0 <PIOB_Handler+0xc>)
   801ba:	4b02      	ldr	r3, [pc, #8]	; (801c4 <PIOB_Handler+0x10>)
   801bc:	4798      	blx	r3
   801be:	bd08      	pop	{r3, pc}
   801c0:	400e1000 	.word	0x400e1000
   801c4:	00080151 	.word	0x00080151

000801c8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   801c8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   801ca:	210d      	movs	r1, #13
   801cc:	4801      	ldr	r0, [pc, #4]	; (801d4 <PIOC_Handler+0xc>)
   801ce:	4b02      	ldr	r3, [pc, #8]	; (801d8 <PIOC_Handler+0x10>)
   801d0:	4798      	blx	r3
   801d2:	bd08      	pop	{r3, pc}
   801d4:	400e1200 	.word	0x400e1200
   801d8:	00080151 	.word	0x00080151

000801dc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   801dc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   801de:	210e      	movs	r1, #14
   801e0:	4801      	ldr	r0, [pc, #4]	; (801e8 <PIOD_Handler+0xc>)
   801e2:	4b02      	ldr	r3, [pc, #8]	; (801ec <PIOD_Handler+0x10>)
   801e4:	4798      	blx	r3
   801e6:	bd08      	pop	{r3, pc}
   801e8:	400e1400 	.word	0x400e1400
   801ec:	00080151 	.word	0x00080151

000801f0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   801f0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   801f2:	4770      	bx	lr

000801f4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   801f4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   801f6:	4770      	bx	lr

000801f8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
   801f8:	4770      	bx	lr
   801fa:	bf00      	nop

000801fc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   801fc:	e7fe      	b.n	801fc <Dummy_Handler>
   801fe:	bf00      	nop

00080200 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80200:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80202:	4b1e      	ldr	r3, [pc, #120]	; (8027c <Reset_Handler+0x7c>)
   80204:	4a1e      	ldr	r2, [pc, #120]	; (80280 <Reset_Handler+0x80>)
   80206:	429a      	cmp	r2, r3
   80208:	d003      	beq.n	80212 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8020a:	4b1e      	ldr	r3, [pc, #120]	; (80284 <Reset_Handler+0x84>)
   8020c:	4a1b      	ldr	r2, [pc, #108]	; (8027c <Reset_Handler+0x7c>)
   8020e:	429a      	cmp	r2, r3
   80210:	d304      	bcc.n	8021c <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80212:	4b1d      	ldr	r3, [pc, #116]	; (80288 <Reset_Handler+0x88>)
   80214:	4a1d      	ldr	r2, [pc, #116]	; (8028c <Reset_Handler+0x8c>)
   80216:	429a      	cmp	r2, r3
   80218:	d30f      	bcc.n	8023a <Reset_Handler+0x3a>
   8021a:	e01a      	b.n	80252 <Reset_Handler+0x52>
   8021c:	4917      	ldr	r1, [pc, #92]	; (8027c <Reset_Handler+0x7c>)
   8021e:	4b1c      	ldr	r3, [pc, #112]	; (80290 <Reset_Handler+0x90>)
   80220:	1a5b      	subs	r3, r3, r1
   80222:	f023 0303 	bic.w	r3, r3, #3
   80226:	3304      	adds	r3, #4
   80228:	4a15      	ldr	r2, [pc, #84]	; (80280 <Reset_Handler+0x80>)
   8022a:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   8022c:	f852 0b04 	ldr.w	r0, [r2], #4
   80230:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80234:	429a      	cmp	r2, r3
   80236:	d1f9      	bne.n	8022c <Reset_Handler+0x2c>
   80238:	e7eb      	b.n	80212 <Reset_Handler+0x12>
   8023a:	4b16      	ldr	r3, [pc, #88]	; (80294 <Reset_Handler+0x94>)
   8023c:	4a16      	ldr	r2, [pc, #88]	; (80298 <Reset_Handler+0x98>)
   8023e:	1ad2      	subs	r2, r2, r3
   80240:	f022 0203 	bic.w	r2, r2, #3
   80244:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80246:	3b04      	subs	r3, #4
		*pDest++ = 0;
   80248:	2100      	movs	r1, #0
   8024a:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8024e:	4293      	cmp	r3, r2
   80250:	d1fb      	bne.n	8024a <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80252:	4b12      	ldr	r3, [pc, #72]	; (8029c <Reset_Handler+0x9c>)
   80254:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80258:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   8025c:	4910      	ldr	r1, [pc, #64]	; (802a0 <Reset_Handler+0xa0>)
   8025e:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80260:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80268:	d203      	bcs.n	80272 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8026a:	688b      	ldr	r3, [r1, #8]
   8026c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80270:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80272:	4b0c      	ldr	r3, [pc, #48]	; (802a4 <Reset_Handler+0xa4>)
   80274:	4798      	blx	r3

	/* Branch to main function */
	main();
   80276:	4b0c      	ldr	r3, [pc, #48]	; (802a8 <Reset_Handler+0xa8>)
   80278:	4798      	blx	r3
   8027a:	e7fe      	b.n	8027a <Reset_Handler+0x7a>
   8027c:	20070000 	.word	0x20070000
   80280:	00080420 	.word	0x00080420
   80284:	20070428 	.word	0x20070428
   80288:	200704b4 	.word	0x200704b4
   8028c:	20070428 	.word	0x20070428
   80290:	20070427 	.word	0x20070427
   80294:	2007042c 	.word	0x2007042c
   80298:	200704b7 	.word	0x200704b7
   8029c:	00080000 	.word	0x00080000
   802a0:	e000ed00 	.word	0xe000ed00
   802a4:	000802b9 	.word	0x000802b9
   802a8:	000802ad 	.word	0x000802ad

000802ac <main>:
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
#include <asf.h>

int main (void)
{
   802ac:	b508      	push	{r3, lr}
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
   802ae:	4b01      	ldr	r3, [pc, #4]	; (802b4 <main+0x8>)
   802b0:	4798      	blx	r3
   802b2:	e7fe      	b.n	802b2 <main+0x6>
   802b4:	000801f9 	.word	0x000801f9

000802b8 <__libc_init_array>:
   802b8:	b570      	push	{r4, r5, r6, lr}
   802ba:	4e0f      	ldr	r6, [pc, #60]	; (802f8 <__libc_init_array+0x40>)
   802bc:	4d0f      	ldr	r5, [pc, #60]	; (802fc <__libc_init_array+0x44>)
   802be:	1b76      	subs	r6, r6, r5
   802c0:	10b6      	asrs	r6, r6, #2
   802c2:	bf18      	it	ne
   802c4:	2400      	movne	r4, #0
   802c6:	d005      	beq.n	802d4 <__libc_init_array+0x1c>
   802c8:	3401      	adds	r4, #1
   802ca:	f855 3b04 	ldr.w	r3, [r5], #4
   802ce:	4798      	blx	r3
   802d0:	42a6      	cmp	r6, r4
   802d2:	d1f9      	bne.n	802c8 <__libc_init_array+0x10>
   802d4:	4e0a      	ldr	r6, [pc, #40]	; (80300 <__libc_init_array+0x48>)
   802d6:	4d0b      	ldr	r5, [pc, #44]	; (80304 <__libc_init_array+0x4c>)
   802d8:	f000 f890 	bl	803fc <_init>
   802dc:	1b76      	subs	r6, r6, r5
   802de:	10b6      	asrs	r6, r6, #2
   802e0:	bf18      	it	ne
   802e2:	2400      	movne	r4, #0
   802e4:	d006      	beq.n	802f4 <__libc_init_array+0x3c>
   802e6:	3401      	adds	r4, #1
   802e8:	f855 3b04 	ldr.w	r3, [r5], #4
   802ec:	4798      	blx	r3
   802ee:	42a6      	cmp	r6, r4
   802f0:	d1f9      	bne.n	802e6 <__libc_init_array+0x2e>
   802f2:	bd70      	pop	{r4, r5, r6, pc}
   802f4:	bd70      	pop	{r4, r5, r6, pc}
   802f6:	bf00      	nop
   802f8:	00080408 	.word	0x00080408
   802fc:	00080408 	.word	0x00080408
   80300:	00080410 	.word	0x00080410
   80304:	00080408 	.word	0x00080408

00080308 <register_fini>:
   80308:	4b02      	ldr	r3, [pc, #8]	; (80314 <register_fini+0xc>)
   8030a:	b113      	cbz	r3, 80312 <register_fini+0xa>
   8030c:	4802      	ldr	r0, [pc, #8]	; (80318 <register_fini+0x10>)
   8030e:	f000 b805 	b.w	8031c <atexit>
   80312:	4770      	bx	lr
   80314:	00000000 	.word	0x00000000
   80318:	00080329 	.word	0x00080329

0008031c <atexit>:
   8031c:	2300      	movs	r3, #0
   8031e:	4601      	mov	r1, r0
   80320:	461a      	mov	r2, r3
   80322:	4618      	mov	r0, r3
   80324:	f000 b814 	b.w	80350 <__register_exitproc>

00080328 <__libc_fini_array>:
   80328:	b538      	push	{r3, r4, r5, lr}
   8032a:	4d07      	ldr	r5, [pc, #28]	; (80348 <__libc_fini_array+0x20>)
   8032c:	4c07      	ldr	r4, [pc, #28]	; (8034c <__libc_fini_array+0x24>)
   8032e:	1b2c      	subs	r4, r5, r4
   80330:	10a4      	asrs	r4, r4, #2
   80332:	d005      	beq.n	80340 <__libc_fini_array+0x18>
   80334:	3c01      	subs	r4, #1
   80336:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   8033a:	4798      	blx	r3
   8033c:	2c00      	cmp	r4, #0
   8033e:	d1f9      	bne.n	80334 <__libc_fini_array+0xc>
   80340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80344:	f000 b864 	b.w	80410 <_fini>
   80348:	00080420 	.word	0x00080420
   8034c:	0008041c 	.word	0x0008041c

00080350 <__register_exitproc>:
   80350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80354:	4c25      	ldr	r4, [pc, #148]	; (803ec <__register_exitproc+0x9c>)
   80356:	4606      	mov	r6, r0
   80358:	6825      	ldr	r5, [r4, #0]
   8035a:	4688      	mov	r8, r1
   8035c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   80360:	4692      	mov	sl, r2
   80362:	4699      	mov	r9, r3
   80364:	b3c4      	cbz	r4, 803d8 <__register_exitproc+0x88>
   80366:	6860      	ldr	r0, [r4, #4]
   80368:	281f      	cmp	r0, #31
   8036a:	dc17      	bgt.n	8039c <__register_exitproc+0x4c>
   8036c:	1c41      	adds	r1, r0, #1
   8036e:	b176      	cbz	r6, 8038e <__register_exitproc+0x3e>
   80370:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   80374:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   80378:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   8037c:	2201      	movs	r2, #1
   8037e:	4082      	lsls	r2, r0
   80380:	4315      	orrs	r5, r2
   80382:	2e02      	cmp	r6, #2
   80384:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   80388:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   8038c:	d01e      	beq.n	803cc <__register_exitproc+0x7c>
   8038e:	1c83      	adds	r3, r0, #2
   80390:	6061      	str	r1, [r4, #4]
   80392:	2000      	movs	r0, #0
   80394:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   80398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8039c:	4b14      	ldr	r3, [pc, #80]	; (803f0 <__register_exitproc+0xa0>)
   8039e:	b303      	cbz	r3, 803e2 <__register_exitproc+0x92>
   803a0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   803a4:	f3af 8000 	nop.w
   803a8:	4604      	mov	r4, r0
   803aa:	b1d0      	cbz	r0, 803e2 <__register_exitproc+0x92>
   803ac:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   803b0:	2700      	movs	r7, #0
   803b2:	e884 0088 	stmia.w	r4, {r3, r7}
   803b6:	4638      	mov	r0, r7
   803b8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   803bc:	2101      	movs	r1, #1
   803be:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   803c2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   803c6:	2e00      	cmp	r6, #0
   803c8:	d0e1      	beq.n	8038e <__register_exitproc+0x3e>
   803ca:	e7d1      	b.n	80370 <__register_exitproc+0x20>
   803cc:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   803d0:	431a      	orrs	r2, r3
   803d2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   803d6:	e7da      	b.n	8038e <__register_exitproc+0x3e>
   803d8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   803dc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   803e0:	e7c1      	b.n	80366 <__register_exitproc+0x16>
   803e2:	f04f 30ff 	mov.w	r0, #4294967295
   803e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   803ea:	bf00      	nop
   803ec:	000803f8 	.word	0x000803f8
   803f0:	00000000 	.word	0x00000000
   803f4:	00000043 	.word	0x00000043

000803f8 <_global_impure_ptr>:
   803f8:	20070000                                ... 

000803fc <_init>:
   803fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   803fe:	bf00      	nop
   80400:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80402:	bc08      	pop	{r3}
   80404:	469e      	mov	lr, r3
   80406:	4770      	bx	lr

00080408 <__init_array_start>:
   80408:	00080309 	.word	0x00080309

0008040c <__frame_dummy_init_array_entry>:
   8040c:	00080119                                ....

00080410 <_fini>:
   80410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80412:	bf00      	nop
   80414:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80416:	bc08      	pop	{r3}
   80418:	469e      	mov	lr, r3
   8041a:	4770      	bx	lr

0008041c <__fini_array_start>:
   8041c:	000800f5 	.word	0x000800f5
